Designing Data-Intensive Applications: The Big Ideas Behind Reliable, Scalable, and Maintainable Systems 1st Edition

Перечислим несколько вариантов, позволяющих
сделать чтение линеаризуемым.
Можно последовательно читать через журнал, добавляя туда сообщение, считы- вая журнал и затем выполняя фактическое чтение после возврата сообщения. Таким образом, позиция сообщения в журнале определяет момент времени, в который происходит чтение. (Примерно так реализованы операции чтения в Quorum [16].)
Если журнал позволяет получить позицию последнего сообщения линеаризу- емым способом, то можно запросить ее, дождаться, пока вам будут доставлены все записи до этой позиции, а затем выполнить чтение. (Данная идея лежит в основе операции sync() в ZooKeeper [15].)
Можно выполнить чтение реплики, которая синхронно обновляется при записи и, следовательно, наверняка будет актуальной. (Этот метод используется при цепной репликации [63]; см. также врезку «Исследования вопроса репликации» в подразделе «Синхронная и асинхронная репликация» раздела 5.1.)

этой формулировке консенсусный алгоритм должен удовлетворять следующим требованиям [25]1.
Единое решение. Никакие два узла не могут получить разные решения.
Целостность. Ни один узел не получает два решения.
Действительность. Если узел выбирает решение v, то v было предложено дру- гим узлом.
Завершенность. Каждый узел, который не вышел из строя, в конечном итоге выбирает то или иное значение.

Завершенность — свойство жизнеспособности, в то время как остальные три являются свойствами безопасно- сти, см. пункт «Функциональная безопасность и живучесть» подраздела «Модели системы на практике» раздела 8.4.

Наиболее известными отказоустойчивыми консенсусными алгоритмами явля- ются Viewstamped Replication (VSR) [94, 95], Paxos [96–99], Raft [22, 100, 101] и Zab [15, 21, 102].

Алгоритм рассылки общей последовательности

Гарантия уникальности ведущего узла в любой момент времени

более слабую гарантию: протоколы определяют номер перио- да (в Paxos называемый номером бюллетеня, в Viewstamped Replication — номером просмотра, в Raft — номером термина) и гарантируют, что в каждый период веду- щий узел уникален.

Большинство консенсусных алгоритмов предполагает, что в голосовании уча- ствует фиксированный набор узлов. То есть нельзя просто добавить или удалить узел в кластере. Расширения динамического членства в консенсусных алгоритмах позволяют изменять набор узлов в кластере, но они гораздо менее понятны, чем алгоритмы статического членства.

Система ZooKeeper смоделирована после сервиса блокировки Google Chubby [14, 98]. В ней реализована не только рассылка общей последовательности

проблем фактически сводится к консенсусу, они эквивалентны (в том смысле, что если есть решение для одной из них, то его можно легко превратить в таковое для остальных). К таким эквивалентным проблемам относятся следующие.
Линейные реестры сравнения с присвоением. Реестр должен атомарно принять решение, присваивать ли значение в зависимости от того, соответствует ли его текущее значение параметру, указанному в операции.
Атомарная транзакция. База данных должна принять решение, следует ли за- вершать или отменить распределенную транзакцию.
Рассылка общей последовательности. Система обмена сообщениями должна принять решение о последовательности доставки сообщений.
Блокировки и аренда. Когда несколько клиентов ратуют за блокировку или ее отмену, блокировка принимает решение о том, какой из них выбрать.
Сервис членства и координации. Основываясь на детекторе отказа (например, времени задержки), система должна принять решение, какие узлы активны, а какие следует считать вышедшими из строя, потому что их сеансы были от- ключены.
Ограничение уникальности. Когда несколько транзакций конкурентно пытаются создать конфликтующие записи с одним и тем же ключом, ограничение должно принять решение, какую из них разрешить, а какие — отменить по причине на- рушения ограничения.

Временные метки Лампорта

Линеаризуемость, и более слабая причинность

линеаризуемость — популярную модель согласован- ности: ее цель состоит в том, чтобы реплицированные данные выглядели так, как будто существует только одна копия и все операции воздействуют на нее атомарно.

причинность, которая требует соблюдения последова- тельности событий в системе (что произошло раньше, а что позже, на основании причинно-следственных взаимосвязей). В отличие от линеаризуемости, выстраи- вающей все операции в единую, полностью упорядоченную временную последо- вательность, причинность позволяет построить более слабую модель согласован- ности: отдельные события могут быть конкурентными, как в истории версий с ее ветвлениями и слияниями. Причинная согласованность не несет накладных рас- ходов на линеаризуемость и гораздо менее чувствительна к сетевым проблемам.

этой формулировке консенсусный алгоритм должен удовлетворять следующим требованиям [25]1.
Единое решение. Никакие два узла не могут получить разные решения.
Целостность. Ни один узел не получает два решения.
Действительность. Если узел выбирает решение v, то v было предложено дру- гим узлом.
Завершенность. Каждый узел, который не вышел из строя, в конечном итоге выбирает то или иное значение.

Завершенность — свойство жизнеспособности, в то время как остальные три являются свойствами безопасно- сти, см. пункт «Функциональная безопасность и живучесть» подраздела «Модели системы на практике» раздела 8.4.

Наиболее известными отказоустойчивыми консенсусными алгоритмами явля- ются Viewstamped Replication (VSR) [94, 95], Paxos [96–99], Raft [22, 100, 101] и Zab [15, 21, 102].

Алгоритм рассылки общей последовательности

Гарантия уникальности ведущего узла в любой момент времени

более слабую гарантию: протоколы определяют номер перио- да (в Paxos называемый номером бюллетеня, в Viewstamped Replication — номером просмотра, в Raft — номером термина) и гарантируют, что в каждый период веду- щий узел уникален.

Большинство консенсусных алгоритмов предполагает, что в голосовании уча- ствует фиксированный набор узлов. То есть нельзя просто добавить или удалить узел в кластере. Расширения динамического членства в консенсусных алгоритмах позволяют изменять набор узлов в кластере, но они гораздо менее понятны, чем алгоритмы статического членства.

Система ZooKeeper смоделирована после сервиса блокировки Google Chubby [14, 98]. В ней реализована не только рассылка общей последовательности

проблем фактически сводится к консенсусу, они эквивалентны (в том смысле, что если есть решение для одной из них, то его можно легко превратить в таковое для остальных). К таким эквивалентным проблемам относятся следующие.
Линейные реестры сравнения с присвоением. Реестр должен атомарно принять решение, присваивать ли значение в зависимости от того, соответствует ли его текущее значение параметру, указанному в операции.
Атомарная транзакция. База данных должна принять решение, следует ли за- вершать или отменить распределенную транзакцию.
Рассылка общей последовательности. Система обмена сообщениями должна принять решение о последовательности доставки сообщений.
Блокировки и аренда. Когда несколько клиентов ратуют за блокировку или ее отмену, блокировка принимает решение о том, какой из них выбрать.
Сервис членства и координации. Основываясь на детекторе отказа (например, времени задержки), система должна принять решение, какие узлы активны, а какие следует считать вышедшими из строя, потому что их сеансы были от- ключены.
Ограничение уникальности. Когда несколько транзакций конкурентно пытаются создать конфликтующие записи с одним и тем же ключом, ограничение должно принять решение, какую из них разрешить, а какие — отменить по причине на- рушения ограничения.

Временные метки Лампорта

Линеаризуемость, и более слабая причинность

линеаризуемость — популярную модель согласован- ности: ее цель состоит в том, чтобы реплицированные данные выглядели так, как будто существует только одна копия и все операции воздействуют на нее атомарно.

причинность, которая требует соблюдения последова- тельности событий в системе (что произошло раньше, а что позже, на основании причинно-следственных взаимосвязей). В отличие от линеаризуемости, выстраи- вающей все операции в единую, полностью упорядоченную временную последо- вательность, причинность позволяет построить более слабую модель согласован- ности: отдельные события могут быть конкурентными, как в истории версий с ее ветвлениями и слияниями. Причинная согласованность не несет накладных рас- ходов на линеаризуемость и гораздо менее чувствительна к сетевым проблемам.

Толерантность к человеческим ошибкам

Минимизация необратимости



Дифференциальный поток данных

Сквозной аргумент

TCP соединение к базе, и транзакция на ней не могут защитить от повторной записи, и нужны уникальные сквозные идентификаторы операции через все системы, например, uuid операции